#!/bin/bash
## TODO: have ability to set stuff on cmdline for xbps-repo-checkvers, cfg, etc
VERSION=0.0.0

CFG=
CFG_CMDLINE=
CFG_CROSS=
CROSS_ARCH=
DISTDIR=
MASTERDIR=
HOSTDIR=
SRCPKGS=
XSC=
_append=""
RCV=`which xbps-repo-checkvers 2>/dev/null`
RCV_F="repo-checkvers.txt"
TOBUILD=
_TOBUILD=
USAGE="Usage: $0 [-a cross-arch] [-CN] [c|d|m|h arg]\" ]"

[ -f $RCV ] || {
	printf "ERROR: The 'xbps-repo-checkvers' was not found in the PATH.\n"
	printf "Please install it with:\n\n"
	printf "\t $ xbps-install -Sy install xbps-src-utils\n\n"
	printf "... and then run this thing again. :)\n"
	exit 1
}

while getopts a:Cc:d:Nm:h:v OPT; do
	case "$OPT" in
	a)
		CFG_CROSS="-a $OPTARG"
		case "$OPTARG" in
			native) unset CFG_CROSS CROSS_ARCH;;
			native-*-musl)
				unset CFG_CROSS CROSS_ARCH
				export XBPS_ARCH=${OPTARG#native-}
				;;
			armv6hf) CROSS_ARCH="armv6l";;
			armv6hf-musl) CROSS_ARCH="armv6l-musl";;
			armv7) CROSS_ARCH="armv7l";;
			armv7-musl) CROSS_ARCH="armv7l-musl";;
			*) CROSS_ARCH="$OPTARG";;
		esac
		;;
	v)
		printf "xbps-bulk version $VERSION\n"
		exit 0
		;;
	C)
		rm -rf tobuild built
		rm -f *.txt Makefile
		exit 0
		;;
	c)
		[ -f $OPTARG ] || {
			printf "ERROR: Cannot find config file "
			printf "'%s': No such file or directory.\n" "$OPTARG"
			exit 1
		}
		CFG="$OPTARG"
		;;
	d)
		[ -d $OPTARG ] || {
			printf "ERROR: Cannot find DISTDIR "
			printf "'%s': No such file or directory.\n" "$OPTARG"
			exit 1
		}
		DISTDIR="$OPTARG"
		;;
	N)	CFG_LOCAL="-N";;
	m)
		[ -d $OPTARG ] || {
			printf "ERROR: Cannot find MASTERDIR "
			printf "'%s': No such file or directory.\n" "$OPTARG"
			exit 1
		}
		MASTERDIR="$OPTARG"
		;;
	h)
		[ -d $OPTARG ] || {
			printf "ERROR: Cannot find HOSTDIR "
			printf "'%s': No such file or directory.\n" "$OPTARG"
			exit 1
		}
		HOSTDIR="$OPTARG"
		;;
	\?)
		printf "%s\n" "$USAGE"
		exit 1
		;;
	esac
done
shift $(($OPTIND - 1))

if [ -z "$CFG" ]; then
	if [ -f "/etc/xbps/xbps-src.conf" ]; then
		CFG="/etc/xbps/xbps-src.conf"
	elif [ -f "/usr/local/etc/xbps/xbps-src.conf" ]; then
		CFG="/usr/local/etc/xbps/xbps-src.conf"
	else
		printf "WARNING: No xbps-src configuration "
		printf "found in the default directories!\n"
	fi
fi

test $CFG && {
	printf "INFO: Loading xbps-src config '$CFG'...\n"
	. $CFG
	CFG_CMDLINE="-c $CFG"
	test $DISTDIR   || DISTDIR=$XBPS_DISTDIR
	test $MASTERDIR || MASTERDIR=$XBPS_MASTERDIR
	test $HOSTDIR   || HOSTDIR=$XBPS_HOSTDIR
	test $SRCPKGS   || SRCPKGS=$XBPS_DISTDIR/srcpkgs

	# if its not defined on cmd line OR in config file.
	test $HOSTDIR   || HOSTDIR=$MASTERDIR/host
}

# NO config file, and no cmdline arguments
for d in $DISTDIR $MASTERDIR $HOSTDIR ; do
	if [ ! $d ]; then
		printf "ERROR: You have no xbps-src configuration file AND you\n"
		printf "have not provided any info manually via command-line\n"
		printf "switch(s)! Aborting.\n"
		printf "$USAGE\n"
		exit 1
	else
		printf "INFO: Using '%s'\n" "$d"
	fi
done

SRCPKGS=$DISTDIR/srcpkgs
XBPS_SRCPKGDIR=$SRCPKGS

XSC="xbps-src $CFG_CROSS $CFG_LOCAL -L $CFG_CMDLINE -D $DISTDIR -m $MASTERDIR -H $HOSTDIR"

if [ -n "$CFG_CROSS" ]; then
	export XBPS_TARGET_ARCH=$CROSS_ARCH
fi

RCV_CMD_LINE="$RCV --distdir=${DISTDIR} ${*}"
printf "INFO: Getting list of updates, please wait...\n"
printf "INFO: Running '$RCV_CMD_LINE' (${CROSS_ARCH:-native}) ...\n"

[ -f $RCV_F ] && _append="-a"
$RCV_CMD_LINE | tee ${_append} $RCV_F
if [ 0 -ne ${PIPESTATUS[0]} ]; then
	printf "ERROR: xbps-repo-checkvers exited with an error: %d\n" ${PIPESTATUS[0]}
	exit 1
fi
grep pkgname $RCV_F | awk '{ print $2 }' > pkgs.txt

printf "INFO: Creating source targets...\n"
rm -rf tobuild built
mkdir -p tobuild built
for p in `cat pkgs.txt`; do
	if [ -f "$SRCPKGS/$p/template" ]; then
		touch tobuild/$p
	fi
done

_TOBUILD="`find tobuild -type f`"

concat() {
	local found=0
	for tb in $TOBUILD; do
		if [ "$1" = "$tb" ]; then
			found=1
			break
		fi
	done
	if [ $found -eq 0 ]; then
		TOBUILD="$TOBUILD $1"
	fi
}

getlink() {
	local p="`basename $1`"
	local target="`readlink $SRCPKGS/$p`"
	if [ $? -eq 0 -a -n "$target" ]; then
		p=$target
	fi
	echo $p
}

printf "INFO: Generating a proper list (without subpkgs)...\n"
for tb in $_TOBUILD; do
	concat "`getlink $tb`"
done

printf "INFO: Removing old Makefile (if any)...\n"
[ -f Makefile ] && rm -f Makefile
touch Makefile


printf "INFO: Generating standard targets...\n"
printf "# Generated by configure, do not modify.\n\n"		>> Makefile
printf "PKGS = $TOBUILD\n"					>> Makefile
printf "TOBUILD = \$(patsubst %%,tobuild/%%,\$(PKGS))\n"	>> Makefile
printf "BUILT = \$(patsubst tobuild/%%,built/%%,\$(TOBUILD))\n\n"	>> Makefile
printf "all: \$(BUILT)\n"					>> Makefile
printf "\t@echo \"[Done]\"\n\n"					>> Makefile
printf "print_pkgs:\n"						>> Makefile
printf "\t@echo \$(PKGS)\n\n"					>> Makefile
printf "built/%%: tobuild/%%\n"					>> Makefile
printf "\t@echo \"[xbps-src]\t\${@F}\"\n"			>> Makefile
printf "\t@$XSC build-pkg \${@F}\n"				>> Makefile
printf "\t@touch \$@\n"						>> Makefile
printf "\t@rm tobuild/\${@F}\n\n"				>> Makefile

printf "INFO: Finding and adding dependencies...\n"
printf "# Dependencies\n"					>> Makefile
for p in $TOBUILD; do
	sedcmd="s|[<>].*\$||g"
	_deps="`$XSC show-build-deps $p | sed -e \"$sedcmd\"`"
	deps=
	for d in $_deps; do
		found=0
		realdep=`getlink $d`
		for _p in $TOBUILD; do
			if [ "$_p" = "$realdep" ]; then
				found=1
				break;
			fi
		done
		if [ $found -gt 0 ]; then
			deps="$deps built/$realdep"
		fi
	done
	printf "built/$p: $deps\n"				>> Makefile
done

printf "\n"							>> Makefile
printf "clean:\n"						>> Makefile
printf "\t@rm -f built/*\n"					>> Makefile
printf "\t@echo \"[Clean]\"\n\n"				>> Makefile
printf ".PHONY: all print_pkgs clean\n"				>> Makefile

printf "INFO: 'Makefile' generated.\n"
printf "INFO: Type 'make'\n"
exit 0
